{"version":3,"sources":["Spacer.js","Header.js","Collection.js","Card.js","ProgressProvider.js","App.js","serviceWorker.js","index.js","Card.module.css"],"names":["Spacer","className","Header","props","Collection","collectionArr","length","map","item","key","image","name","amiiboSeries","Card","useState","z","i","alreadyCollected","returnInitial","collected","setCollected","style","type","checked","onChange","e","target","collectCallback","object","src","alt","release","ProgressProvider","valueStart","valueEnd","children","React","value","setValue","useEffect","App","query","setQuery","search","setSearch","results","setResults","isOrdered","setIsOrdered","typeSearch","setTypeSearch","setType","collection","setCollection","getAmiiboSearch","a","typeURL","searchURL","fetch","response","json","data","amiibo","handleCollect","prevCollection","filter","collectionItem","console","log","onSubmit","preventDefault","placeholder","onClick","Math","ceil","text","styles","buildStyles","strokeLinecap","textSize","pathTransitionDuration","pathColor","textColor","trailColor","backgroundColor","resultInput","filteredInput","result","na","sort","b","parseInt","replace","reorder","series","gameSeries","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.7dbc6b7b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Spacer = () => {\r\n\r\n    return(\r\n        <div className = \"Spacer\">\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spacer","import React from 'react';\r\n\r\n\r\nconst Header = (props) =>\r\n{\r\n    return(\r\n        <div className = \"Backdrop\">\r\n        <h1 className = \"Main-Header\">\r\n        Amiibo Collector Suite\r\n        </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nconst Collection = (props) =>\r\n{\r\n    return(\r\n        <div>\r\n        <h1 className = \"Header\">\r\n        Collection:\r\n        </h1>\r\n        {props.collectionArr.length > 0 ? \r\n        <ul className = \"CollectionList\">\r\n          {props.collectionArr.map((item) => {\r\n            return <li key={item.image}>{item.name} - {item.amiiboSeries}</li>;\r\n          })}\r\n        </ul>\r\n        :\r\n        <p>Check boxes to add to Collection...</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Collection;","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport style from \"./Card.module.css\";\r\n\r\nconst Card = (props) => {\r\n  const returnInitial = () => {\r\n    let z = false;\r\n    for (let i = 0; i < props.alreadyCollected.length; i++) {\r\n      if (props.alreadyCollected[i].image === props.image) {\r\n        z = true;\r\n      }\r\n    }\r\n    return z;\r\n  };\r\n\r\n  const [collected, setCollected] = useState(returnInitial());\r\n\r\n  const handleCheck = (e) => {\r\n    setCollected(e.target.checked);\r\n    props.collectCallback(props.object, e.target.checked);\r\n  };\r\n  return (\r\n    <div className={style.Card}>\r\n      <input type=\"checkbox\" checked={collected} onChange={handleCheck} />\r\n      <h1 className = \"Card-Header\">\r\n        {props.name} - {props.object.amiiboSeries}\r\n      </h1>\r\n      <img className={style.image} src={props.image} alt=\"amiibo\" />\r\n      <p className = \"Card-Text\">Released on {props.release}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\n// If you don't have a version of React that supports\r\n// hooks, you can use a class-based version of this\r\n// component in ProgressProviderUsingClass.js\r\nconst ProgressProvider = ({ valueStart, valueEnd, children }) => {\r\n  const [value, setValue] = React.useState(valueStart);\r\n  React.useEffect(() => {\r\n    setValue(valueEnd);\r\n  }, [valueEnd]);\r\n\r\n  return children(value);\r\n};\r\nexport default ProgressProvider;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Spacer from \"./Spacer.js\";\r\nimport Header from \"./Header\";\r\nimport \"./App.css\";\r\nimport \"./Collection\";\r\nimport Card from \"./Card\";\r\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport ProgressProvider from \"./ProgressProvider\";\r\nimport Collection from \"./Collection\";\r\n\r\nconst App = () => {\r\n  //changes when user types input into search bar.\r\n  const [query, setQuery] = useState(\"\");\r\n  //changes only when the user presses the search button and contains the search text\r\n  const [search, setSearch] = useState(\"\");\r\n  //array of results, which are objects\r\n  const [results, setResults] = useState([]);\r\n  /*\r\n   *boolean value which determines whether the reuslts show in release order or by order\r\n   *of the api\r\n   */\r\n  const [isOrdered, setIsOrdered] = useState(false);\r\n\r\n  //changes when a user selects a filter type in the dropdown and then clicks search.\r\n  const [typeSearch, setTypeSearch] = useState(\"\");\r\n  //changes when user selects filter type in the dropdown\r\n  const [type, setType] = useState(\"\");\r\n  //array of the user's collection\r\n  const [collection, setCollection] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getAmiiboSearch();\r\n  }, [search, typeSearch]);\r\n\r\n  const getAmiiboSearch = async () => {\r\n    let typeURL,\r\n      searchURL = \"empty\";\r\n    typeURL = type ? (search ? `&type=${type}` : `?type=${type}`) : ``;\r\n    searchURL = search ? `?name=${search}` : ``;\r\n    const response = await fetch(\r\n      `https://www.amiiboapi.com/api/amiibo/${searchURL}${typeURL}`\r\n    );\r\n    const data = await response.json();\r\n    setResults(data.amiibo);\r\n  };\r\n  //sets the query value in state (changes on every keystroke)\r\n  const handleChange = (e) => {\r\n    const { value } = e.target;\r\n    setQuery(value);\r\n  };\r\n\r\n  //sets the search value in state (changes when user clicks search button)\r\n  const handleSearch = (e) => {\r\n    e.preventDefault();\r\n    setSearch(query);\r\n    setTypeSearch(type);\r\n  };\r\n\r\n  //sets type value in state\r\n  const handleTypeChange = (e) => {\r\n    const { value } = e.target;\r\n    setType(value);\r\n  };\r\n\r\n  //reorders results\r\n  const reorder = (resultInput) => {\r\n    let filteredInput = resultInput.filter((result) => {\r\n      return result.release.na;\r\n    });\r\n    filteredInput.sort((a, b) => {\r\n      return (\r\n        parseInt(b.release.na.replace(/-/g, \"\")) -\r\n        parseInt(a.release.na.replace(/-/g, \"\"))\r\n      );\r\n    });\r\n    return filteredInput;\r\n  };\r\n\r\n  //adds or removes a result that has been checked to the collection array in state\r\n  const handleCollect = (object, checked) => {\r\n    if (checked) {\r\n      setCollection((prevCollection) => {\r\n        return [...prevCollection, object];\r\n      });\r\n    }\r\n    //removes item from collection state array\r\n    else if (!checked) {\r\n      setCollection((prevCollection) => {\r\n        return prevCollection.filter((collectionItem) => {\r\n          return collectionItem.image !== object.image;\r\n        });\r\n      }, console.log(collection));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Spacer />\r\n      <div className=\"Column-Layout\">\r\n        <div>\r\n        <form onSubmit={handleSearch}>\r\n          <input\r\n            type=\"text\"\r\n            onChange={handleChange}\r\n            placeholder=\"SEARCH...\"\r\n            value={query}\r\n          />\r\n          <br></br>\r\n          <label>Select Type: </label>\r\n          <select value={type} onChange={handleTypeChange} name=\"type\">\r\n            <option value=\"\">All</option>\r\n            <option value=\"figure\">Figure</option>\r\n            <option value=\"card\">Card</option>\r\n            <option value=\"yarn\">Yarn</option>\r\n          </select>\r\n          <br></br>\r\n          <button className = \"Form-Button\">Click to Search</button>\r\n        </form>\r\n        <br />\r\n        {!isOrdered ? (\r\n            <button\r\n            className = \"Form-Button\"\r\n              onClick={() => {\r\n                setIsOrdered(true);\r\n              }}\r\n            >\r\n              Click to Order by Release\r\n            </button>\r\n          ) : (\r\n            <button\r\n            className = \"Form-Button\"\r\n              onClick={() => {\r\n                setIsOrdered(false);\r\n              }}\r\n            >\r\n              Un-Order\r\n            </button>\r\n          )}\r\n          </div>\r\n        <Spacer />\r\n        <div className=\"Circular\">\r\n          <ProgressProvider valueStart={0} valueEnd={66}>\r\n            {(value) => (\r\n              <CircularProgressbar\r\n                value={\r\n                  collection ? Math.ceil((collection.length / 749) * 100) : 0\r\n                }\r\n                text={`${collection ? collection.length : 0}/749`}\r\n                styles={buildStyles({\r\n                  // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\r\n                  strokeLinecap: \"butt\",\r\n\r\n                  // Text size\r\n                  textSize: \"1em\",\r\n\r\n                  // How long animation takes to go from one percentage to another, in seconds\r\n                  pathTransitionDuration: 0.5,\r\n\r\n                  // Colors\r\n                  pathColor: `#000000`,\r\n                  textColor: \"#000000\",\r\n                  trailColor: \"#d6d6d6\",\r\n                  backgroundColor: \"#3e98c7\",\r\n                })}\r\n              />\r\n            )}\r\n          </ProgressProvider>\r\n\r\n\r\n\r\n          \r\n        </div>\r\n        <Spacer />\r\n        <div className=\"collectionDiv\">\r\n          <Collection collectionArr={collection} />\r\n        </div>\r\n      </div>\r\n      <div className=\"Results\">\r\n        {results ? (\r\n          isOrdered ? (\r\n            reorder(results).map((result) => (\r\n              <Card\r\n                alreadyCollected={collection}\r\n                key={result.image}\r\n                name={result.name}\r\n                series={result.gameSeries}\r\n                image={result.image}\r\n                release={result.release.na}\r\n                object={result}\r\n                collectCallback={handleCollect}\r\n              />\r\n            ))\r\n          ) : (\r\n            results.map((result) => (\r\n              <Card\r\n                alreadyCollected={collection}\r\n                key={result.image}\r\n                name={result.name}\r\n                series={result.gameSeries}\r\n                image={result.image}\r\n                release={result.release.na}\r\n                object={result}\r\n                collectCallback={handleCollect}\r\n              />\r\n            ))\r\n          )\r\n        ) : (\r\n          <p>No Results</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__3QcsP\",\"image\":\"Card_image__1gOAh\"};"],"sourceRoot":""}